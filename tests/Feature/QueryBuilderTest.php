<?php

namespace Tests\Feature;

use Database\Seeders\CategorySeeder;
use Database\Seeders\CounterSeeder;
use Illuminate\Database\Query\Builder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;

class QueryBuilderTest extends TestCase
{
    // setup
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::delete("delete from products");
        DB::delete("delete from categories");
        DB::delete("delete from counters");
    }

    // query builder insert
    public function testInsert()
    {
        // table categories
        // tambah data dengan query builder
        DB::table("categories")->insert([
            // kalau datanya sudah ada, maka tidak akan di tambahkan
            "id" => "GADGET",
            "name" => "Gadget"
        ]);
        DB::table("categories")->insert([
            "id" => "FOOD",
            "name" => "Food"
        ]);

        // select data
        $result = DB::select("select count(id) as total from categories");
        // hasilnya harus
        self::assertEquals(2, $result[0]->total);
    }

    // query builder insert
    public function testSelect()
    {
        // memanggil 2 insert data yang tadi Gaged dan Food
        $this->testInsert();

        // lalu table categories, select dari kolom "id dan name", lalu get() ambil semua datanya, query builder select 
        $collection = DB::table("categories")->select(["id", "name"])->get();
        // hasinya tidak boleh null/kosong
        self::assertNotNull($collection);

        // kita log setiap datanya
        $collection->each(function ($item) {
            Log::info(json_encode($item));
        });
    }

    public function insertCategories()
    {
        DB::table("categories")->insert([
            "id" => "SMARTPHONE",
            'name' => 'Smartphone',
            'created_at' => '2020-10-10 10:10:10'
        ]);
        DB::table("categories")->insert([
            "id" => "FOOD",
            'name' => 'Food',
            'created_at' => '2020-10-10 10:10:10'
        ]);
        DB::table("categories")->insert([
            "id" => "LAPTOP",
            'name' => 'Laptop',
            'created_at' => '2020-10-10 10:10:10'
        ]);
        DB::table("categories")->insert([
            "id" => "FASHION",
            'name' => 'Fashion',
            'created_at' => '2020-10-10 10:10:10'
        ]);
    }

    // public function insertCategories()
    // {
    //     $this->seed(CategorySeeder::class);
    // }

    // query builder wh
    public function testWhere()
    {
        // ambil dari function insertCategories
        $this->insertCategories();

        // table categories
        $collection = DB::table("categories")->where(function (Builder $builder) {
            // where(column, operator, value), AND column operator value
            $builder->where('id', '=', 'SMARTPHONE');

            // orWhere(column, operator, value) OR (condition)
            $builder->orWhere('id', '=', 'LAPTOP');
            // SELECT * FROM categories WHERE (id = smartphone OR id = laptop)
        })->get();

        // hasilnya
        self::assertCount(2, $collection);
        $collection->each(function ($item) {
            Log::info(json_encode($item));
        });
    }

    // where between method
    public function testWhereBetween()
    {
        // ambil dari function insertCategories
        $this->insertCategories();

        // table categories
        $collection = DB::table("categories")
            // "created_at" = colum, ["array"]
            ->whereBetween("created_at", ["2020-09-10 10:10:10", "2020-11-10 10:10:10"]) // WHERE column BETWEEN value1 AND value2
            ->get(); // ambil semua data

        // hasilnya akan data ke 4
        self::assertCount(4, $collection);
        $collection->each(function ($item) {
            // kita log setiap datanya
            Log::info(json_encode($item));
        });
    }

    // where in method
    public function testWhereIn()
    {
        // ambil dari function insertCategories
        $this->insertCategories();

        // table categories
        $collection = DB::table("categories")
            // "id" = colum, ["array"]
            ->whereIn("id", ["SMARTPHONE", "LAPTOP"]) // WHERE column IN (array)
            ->get(); // ambil semua datanya

        // hasilnya akan data ke 2
        self::assertCount(2, $collection);
        $collection->each(function ($item) {
            // kita log setiap datanya
            Log::info(json_encode($item));
        });
    }

    // where null method
    public function testWhereNull()
    {
        // ambil dari function insertCategories
        $this->insertCategories();

        // table categories
        $collection = DB::table("categories")
            ->whereNull("description") // WHERE column IS NULL
            ->get(); // ambil semua data

        // hasilnya akan dapat 4 datanya
        self::assertCount(4, $collection);
        $collection->each(function ($item) {
            // kita log setiap datanya
            Log::info(json_encode($item));
        });
    }

    // where data method
    public function testWhereDate()
    {
        // ambil dari function insertCategories
        $this->insertCategories();

        // table categories
        $collection = DB::table("categories")
            // "created_at" = column, "2020" = value
            ->whereDate("created_at", "2020-10-10") // WHERE DATE(column) = value
            ->get(); // ambil semua data

        // hasilnya akan 4 data
        self::assertCount(4, $collection);
        $collection->each(function ($item) {
            // kita log setiap datanya
            Log::info(json_encode($item));
        });
    }

    // query builder update
    public function testUpdate()
    {
        // ambil dari function insertCategories
        $this->insertCategories();

        // table categories
        DB::table("categories")
            ->where("id", "=", "SMARTPHONE") // dari id nya semartphone
            ->update(["name" => "Handphone"]); // melakukan update untuk kolom name

        // table categories
        $collection = DB::table("categories")
            ->where("name", "=", "Handphone")
            ->get(); // ambil semua data

        // hasilnya 1 data
        self::assertCount(1, $collection);
        $collection->each(function ($item) {
            // kita log setiap datanya
            Log::info(json_encode($item));
        });
    }

    // upsert (Update or Insert)
    public function testUpsert()
    {
        // table categories
        DB::table("categories")
            ->updateOrInsert([
                "id" => "VOUCHER" // updateOrInsert, melakukan update, jika datanya tidak ada, maka akan dilakukan insert data baru
            ], [
                "name" => "Voucher",
                "description" => "Ticket and Voucher",
                "created_at" => "2020-10-10 10:10:10"
            ]);

        // table categories
        $collection = DB::table("categories")
            ->where("id", "=", "Voucher") // id sama dengan voucher
            ->get(); // ambil semua data

        // hasilnya ada 1 data
        self::assertCount(1, $collection);
        $collection->each(function ($item) {
            // kita log setiap datanya
            Log::info(json_encode($item));
        });
    }

    // increment dam decremenet
    // public function testIncrement()
    // {
    //     // $this->seed(CounterSeeder::class);

    //     // table counters
    //     DB::table("counters")
    //         ->where('id', '=', 'sample') // and column operator value
    //         // 'counter'=column, 1=increment 
    //         ->increment('counter', 1);  // untuk malakukan increment

    //     // table counters
    //     $collection = DB::table("counters")
    //         // 'id'= column, "=" = operator, 'sample' = value
    //         ->where('id', '=', 'sample') // and column operator value
    //         ->get(); // ambil semua datanya

    //     // hasilnya ada 1 data
    //     self::assertCount(1, $collection);
    //     $collection->each(function ($item) {
    //         // kita log setiap datanya
    //         Log::info(json_encode($item));
    //     });
    // }

    // query builder delete
    public function testDelete()
    {
        // ambil dari function insertCategories
        $this->insertCategories();

        // aksinya
        DB::table("categories")
            ->where('id', '=', 'SMARTPHONE') // and column operator value
            ->delete(); // untuk melakukan sql delete

        // hasilnya
        $collection = DB::table("categories")
            ->where("id", "=", "SMARTPHONE") // and column operator value
            ->get(); // ambil semua data

        // hasilnya data 0/tidak ada
        self::assertCount(0, $collection);
    }

    // insert table product
    public function insertProducts()
    {
        // ambil dari function insertCategories
        $this->insertCategories();

        // ambil table products
        DB::table("products")
            // tambah datanya
            ->insert([
                "id" => "1",
                "name" => "iPhone 14 Pro Max",
                "category_id" => "SMARTPHONE",
                "price" => 20000000
            ]);
        DB::table("products")
            ->insert([
                "id" => "2",
                "name" => "Samsung Galaxy S21 Ultra",
                "category_id" => "SMARTPHONE",
                "price" => 18000000
            ]);
    }

    // query builder Join
    public function testJoin()
    {
        // ambil dari function insertProducts
        $this->insertProducts();

        $collection = DB::table("products")
            // join(table, column, operator, ref_column), untuk JOIN atau INNER JOIN
            ->join("categories", "products.category_id", '=', 'categories.id')
            ->select("products.id", "products.name", "products.price", "categories.name as category_name") // akan jadi id
            ->get(); // ambil semua datanya

        // hasil nya akan ada 2 data baru
        self::assertCount(2, $collection);
        $collection->each(function ($item) {
            // kita log setiap datanya
            Log::info(json_encode($item));
        });
    }

    // query builder ordering
    public function testOrdering()
    {
        // ambil dari function insertProducts
        $this->insertProducts();

        $collection = DB::table("products")
            ->whereNotNull("id") // id tidak boleh null/kosong
            // orderBy(column, order) dimana order bisa asc atau desc
            ->orderBy("price", "desc")
            ->orderBy("name", "asc")
            ->get(); // ambil semua data

        // hasil nya ada 2 data
        self::assertCount(2, $collection);
        $collection->each(function ($item) {
            // kita log setiap datanya
            Log::info(json_encode($item));
        });
    }

    // query builder paging
    // public function testPaging()
    // {
    //     // ambil dari function insertProducts
    //     $this->insertCategories();

    //     // ambil database categories
    //     $collection = DB::table("categories")
    //         ->skip(0) // melakukan offset
    //         ->take(2) // melakukan limit
    //         ->get(); // ambil semua data

    //     // hasilnya ada 2 data
    //     self::assertCount(2, $collection);
    //     $collection->each(function ($item) {
    //         // kita log setiap datanya
    //         Log::info(json_encode($item));
    //     });
    // }

    // chunk result
    // public function insertManyCategories()
    // {
    //     // perulangan dengan data table 100
    //     // masukan data 
    //     for ($i = 0; $i < 100; $i++) {
    //         DB::table("categories")->insert([
    //             "id" => "CATEGORY-$i",
    //             "name" => "Category $i",
    //             "created_at" => "2020-10-10 10:10:10"
    //         ]);
    //     }
    // }

    // public function testChunk()
    // {
    //     // ambil dari function insertManyCategories
    //     $this->insertManyCategories();

    //     DB::table("categories")
    //         ->orderBy("id") // ambil berdasarkan id
    //         // chunk(10), sekali query akan mengambil 10 data
    //         ->chunk(10, function ($categories) {

    //             // tidak boleh kosong 
    //             self::assertNotNull($categories);
    //             Log::info("Start Chunk"); // tampilkan pesan
    //             $categories->each(function ($category) {
    //                 // kita log setiap datanya
    //                 Log::info(json_encode($category));
    //             });
    //             Log::info("End Chunk");
    //         });
    // }

    // Lazy Result
    // public function testLazy()
    // {
    //     // ambil dari function insertManyCategories
    //     $this->insertManyCategories();

    //     // ambil table categories
    //     $collection = DB::table("categories")
    //         ->orderBy("id") // ambil berdasarkan id
    //         ->lazy(10) // per chunk nya mau berapa
    //         ->take(3); // tapi mau ambil 3 data, jadi 1x query dan hanya 3 data yg ditampilkan

    //     // hasilnya tidak kosong data collection
    //     self::assertNotNull($collection);

    //     $collection->each(function ($item) {
    //         Log::info(json_encode($item));
    //     });
    // }

    // Cursor
    // public function testCursor()
    // {
    //     // ambil dari function insertManyCategories
    //     $this->insertManyCategories();

    //     $collection = DB::table("categories")
    //         ->orderBy("id") // ambil berdasarkan id
    //         ->cursor(); // hanya akan melakukan query 1x

    //     // hasilnya tidak kosong data collection
    //     self::assertNotNull($collection);

    //     $collection->each(function ($item) {
    //         // kita log setiap datanya
    //         Log::info(json_encode($item));
    //     });
    // }

    // Query Builder Aggregates
    public function testAggregate()
    {
        // ambil dari function insertProducts
        $this->insertProducts();

        $result = DB::table("products")
            ->count("id"); // count(column) untuk jumlah data
        self::assertEquals(2, $result); // hasilnya harus 2

        $result = DB::table("products")
            ->min("price"); // min(column) untuk minimal data
        self::assertEquals(18000000, $result); // harganya harus 1800000

        $result = DB::table("products")
            ->max("price"); // max(column) untuk maksimal data
        self::assertEquals(20000000, $result); // harganya harus 20000000

        $result = DB::table("products")
            ->avg("price"); // avg(column) untuk rata-rata data
        self::assertEquals(19000000, $result); // harganya harus 19000000

        $result = DB::table("products")
            ->sum("price"); // sum(column) untuk menjumlahkan data
        self::assertEquals(38000000, $result); // harganya harus 38000000
    }

    // Query Builder Raw
    public function testQueryBuilderRaw()
    {
        // ambil dari function insertProducts
        $this->insertProducts();

        // kombinasi Query Builder dan juga Raw Query
        $collection = DB::table("products")
            ->select(
                // jadi query builder aggregate, bisa dalam raw
                DB::raw("count(id) as total_product"), // select 
                DB::raw("min(price) as min_price"),
                DB::raw("max(price) as max_price"),
            )->get();

        // hasilnya harus, dan bisa cek hasil kombinasi
        self::assertEquals(2, $collection[0]->total_product);
        self::assertEquals(18000000, $collection[0]->min_price);
        self::assertEquals(20000000, $collection[0]->max_price);
    }

    public function insertProductFood()
    {
        DB::table("products")->insert([
            "id" => "3",
            "name" => "Bakso",
            "category_id" => "FOOD",
            "price" => 20000
        ]);
        DB::table("products")->insert([
            "id" => "4",
            "name" => "Mie Ayam",
            "category_id" => "FOOD",
            "price" => 20000
        ]);
    }

    // query builder grouping
    public function testGroupBy()
    {
        // ambil dari function insertProducts dan insertProductsFood
        $this->insertProducts();
        $this->insertProductFood();

        $collection = DB::table("products")
            // jadi query builder aggregate, bisa dalam raw
            ->select("category_id", DB::raw("count(*) as total_product")) // raw  
            ->groupBy("category_id") // kategorikan berdasarkan category_id
            ->orderBy("category_id", "desc") // ambil berdasarkan "category_id", "desc"
            ->get(); // ambil semua data 

        // hasil yang diharapkan, dan cek hasil kombinasi
        self::assertCount(2, $collection);
        self::assertEquals("SMARTPHONE", $collection[0]->category_id);
        self::assertEquals("FOOD", $collection[1]->category_id);
        self::assertEquals(2, $collection[0]->total_product);
        self::assertEquals(2, $collection[1]->total_product);
    }

    // having
    public function testGroupByHaving()
    {
        // ambil dari function insertProducts dan insertProductsFood
        $this->insertProducts();
        $this->insertProductFood();

        $collection = DB::table("products")
            // jadi query builder aggregate, bisa dalam raw
            ->select("category_id", DB::raw("count(*) as total_product")) // raw
            ->groupBy("category_id") // kategorikan berdasarkan category_id
            ->having(DB::raw("count(*)"), ">", 2) // having count nya lebih dari 2
            ->orderBy("category_id", "desc") // ambil berdasarkan "category_id", "desc"
            ->get(); // ambil semua data

        // hasinya 0 data
        self::assertCount(0, $collection);
    }

    // Query Builder Locking
    public function testLocking()
    {
        // ambil dari function insertProducts
        $this->insertProducts();

        // transaksi database, yang akan berubah
        DB::transaction(function () {
            // dari table products
            $collection = DB::table("products")
                ->where('id', '=', '1') // dari colom id, sama dengan data 1
                ->lockForUpdate() // Secara otomatis Laravel akan menambahkan perintah FOR UPDATE ke Database untuk melakukan Locking
                ->get(); // ambil semua data

            // hasilnya 1 data update
            self::assertCount(1, $collection);
        });
    }

    // Pagination
    public function testPagination()
    {
        // ambil dari function insertProducts
        $this->insertCategories();

        // table categories, dan akan di beri pagination/tampilkan data 2 perpage dan total page 2
        $paginate = DB::table("categories")->paginate(perPage: 2, page: 2);

        // hasinya
        self::assertEquals(2, $paginate->currentPage()); // page saat ini
        self::assertEquals(2, $paginate->perPage()); // tampilan data per page
        self::assertEquals(2, $paginate->lastPage()); // page terakhir 
        self::assertEquals(4, $paginate->total()); // total page 

        // tampilan yang dibuat
        $collection = $paginate->items();
        self::assertCount(2, $collection);
        foreach ($collection as $item) {
            // kita log setiap datanya
            Log::info(json_encode($item));
        }
    }

    // Iterasi Per Page
    public function testIterateAllPagination()
    {
        // ambil dari function insertProducts
        $this->insertCategories();

        $page = 1; // ambil dari page 1

        while (true) {
            $paginate = DB::table("categories")
                // table categories, dan akan di beri pagination/tampilkan data 2 perpage dan total page 2
                ->paginate(perPage: 2, page: $page);

            // apakah empty
            if ($paginate->isEmpty()) {
                break; // kalau udah gak ada datanya
            } else {
                $page++; // naikan pagenya

                // dan lakukan iterasi
                $collection = $paginate->items();
                self::assertCount(2, $collection);
                foreach ($collection as $item) {
                    Log::info(json_encode($item));
                }
            }
        }
    }

    // Cursor Pagination
    public function testCursorPagination()
    {
        // ambil dari function insertCategories
        $this->insertCategories();

        $cursor = "id"; // atur cursor dari id
        while (true) {
            $paginate = DB::table("categories") // table categories
                ->orderBy("id") // ambil berdasarkan id
                // table categories, dan akan di beri pagination/tampilkan data 2 perpage dan total page 2
                ->cursorPaginate(perPage: 2, cursor: $cursor);

            // iterasi
            foreach ($paginate->items() as $item) {
                // tidak boleh kosong
                self::assertNotNull($item);
                // kita log setiap datanya
                Log::info(json_encode($item));
            }

            // variabel cursor akan mengarahkan ke next page
            // cek ambil cursor, dari nextcursornya dari paninate
            $cursor = $paginate->nextCursor();
            // kalau sudah tidak ada
            if ($cursor == null) {
                break; // hentikan
            }
        }
    }
}
